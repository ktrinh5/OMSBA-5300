---
title: "Data Exploration"
author: "Kieu Trinh"
format: docx
editor: visual
---

## Libraries

Load all the libraries:

```{r}
library(tidyverse)
library(rio)
library(lubridate)
library(fixest)
```

## Import Data

Import the trends files, the link file and the scorecard file to perform data cleaning and later regression.

```{r}
# List all trends files
trend_files <- list.files(pattern = "^trends_up_to_.*\\.csv$")

trends_all <- import_list(trend_files, rbind = TRUE)

id_link <- import("id_name_link.csv")

scorecard <- import("Most+Recent+Cohorts+(Scorecard+Elements).csv")
```

## Data Cleaning

Clean Google Trends data by removing missing dates, converting to monthly periods, and standardizing search indices within each school keyword pair for comparability across series.

```{r}
trends_all <- trends_all %>%
  filter(!is.na(monthorweek) & str_trim(monthorweek) != "") %>%
  mutate(date = ymd(str_sub(monthorweek, 1, 10)))

# Go by the month
trends_all <- trends_all %>%
  mutate(month = floor_date(date, unit = "month"))

#standardize index within each schname and keyword
trends_all <- trends_all %>%
  group_by(schname, keyword) %>%
  mutate(new_index = (index - mean(index, na.rm = TRUE)) / sd(index, na.rm = TRUE)) %>%
  ungroup()
```

Clean and convert earnings to numeric, select, rename relevant Scorecard columns, filtered to bachelor’s-degree–granting colleges with non-missing earnings.

```{r}
scorecard_clean <- scorecard %>%
  select(
    UNITID,
    OPEID,
    INSTNM,
    PREDDEG,
    `md_earn_wne_p10-REPORTED-EARNINGS`
  ) %>%
  rename(
    schname = INSTNM,
    degree_type = PREDDEG,
    earnings_raw = `md_earn_wne_p10-REPORTED-EARNINGS`
  ) %>%
  mutate(
    earnings = earnings_raw %>%
      str_remove_all(",") %>%
      str_trim() %>%
      na_if("PrivacySuppressed") %>%
      as.numeric()
  ) %>%
  filter(degree_type == 3, !is.na(earnings))

#lowercase key variable to match with other dataset
scorecard_clean <- scorecard_clean %>%
  rename(unitid = UNITID, opeid = OPEID)
```

Filter ID link data to keep only schools with unique names.

```{r}
id_link_clean <- id_link %>%
  group_by(schname) %>%
  mutate(n = n()) %>%
  filter(n == 1) %>%
  select(-n)
```

Join cleaned Trends data with ID link, then merge with Scorecard data to create the final combined dataset.

```{r}
trends_id <- inner_join(trends_all, id_link_clean, by = "schname")
trends_scorecard_final <- inner_join(trends_id, scorecard_clean, by = c("unitid", "opeid"))
```

Create a post-Scorecard indicator for dates after September 2015 and a high-earning flag for colleges with earnings above the median.

```{r}

trends_scorecard_final <- trends_scorecard_final %>%
  mutate(post_scorecard = as.integer(month >= as.Date("2015-09-01")))

median_earn <- median(trends_scorecard_final$earnings, na.rm = TRUE)

# determine if the college is above or below medium, 1 for above, 0 for below
trends_scorecard_final <- trends_scorecard_final %>%
  mutate(high_earning = as.integer(earnings >= median_earn))
```

Aggregate data to the college month level, calculating average standardized search interest and keyword count for each group.

```{r}
college_monthly_interest <- trends_scorecard_final %>%
  group_by(unitid, month, high_earning, post_scorecard) %>%
  summarise(
    avg_index  = mean(new_index, na.rm = TRUE),
    n_keywords = n(),
    .groups    = "drop"
  )
```

Export a single clean file

```{r}
dir.create("data_clean", showWarnings = FALSE, recursive = TRUE)
export(college_monthly_interest, "data_clean/gt_scorecard_panel_monthly.csv")
```

## Graph

Calculates the average standardized index for high- and low-earning colleges, and plots their trends over time with a vertical line marking the College Scorecard release in September 2015.

```{r}
data <- import("data_clean/gt_scorecard_panel_monthly.csv")
```

Plot the high and low earning

```{r}
monthly_interest_trends <- data %>%
  group_by(month, high_earning) %>%
  summarise(avg_std_index = mean(avg_index, na.rm=TRUE), .groups="drop")

ggplot(monthly_interest_trends, aes(month, avg_std_index, color=factor(high_earning))) +
  geom_line() +
  geom_vline(xintercept = as.Date("2015-09-01"), linetype=2) +
  labs(color="High earning", y="Average standardized search interest", x="Months")
```

## DID regression

```{r}
scorecard_did <- feols(
  avg_index ~ high_earning * post_scorecard | unitid + month,
  cluster = ~ unitid,
  data = data
)

etable(scorecard_did)
```
